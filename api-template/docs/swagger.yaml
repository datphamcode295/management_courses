definitions:
  errors.Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.Class:
    properties:
      Id:
        type: string
      name:
        type: string
    type: object
  model.Client:
    properties:
      class_id:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  model.Course:
    properties:
      id:
        type: string
      lecturer:
        type: string
      name:
        type: string
    type: object
  model.CourseAtClass:
    properties:
      classId:
        type: string
      courseId:
        type: string
      id:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/class/add:
    post:
      consumes:
      - application/json
      description: add class
      parameters:
      - description: class name
        in: query
        name: name
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: add class
      tags:
      - Class
  /api/v1/class/all:
    get:
      consumes:
      - application/json
      description: get all classes
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Class'
      summary: get all classes
      tags:
      - Class
  /api/v1/class/course/{name}:
    post:
      consumes:
      - application/json
      description: find all courses of a class
      parameters:
      - description: class name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/model.Course'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find all courses of a class
      tags:
      - Class
  /api/v1/class/id:
    delete:
      consumes:
      - application/json
      description: delete class by id
      parameters:
      - description: id of class
        in: query
        name: id
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: delete class by id
      tags:
      - Class
  /api/v1/class/id/{id}:
    get:
      consumes:
      - application/json
      description: find class by id
      parameters:
      - description: id of class
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find class by id
      tags:
      - Class
  /api/v1/class/name/{name}:
    get:
      consumes:
      - application/json
      description: find class by name
      parameters:
      - description: class name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find class by name
      tags:
      - Class
  /api/v1/class/students/{name}:
    get:
      consumes:
      - application/json
      description: find all students in a class
      parameters:
      - description: class name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/model.Client'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find all students in a class
      tags:
      - Class
  /api/v1/client/:
    post:
      consumes:
      - application/json
      description: Add all clients information
      parameters:
      - description: name of user
        in: query
        name: name
        required: true
        type: string
      - description: role of user
        in: query
        name: role
        required: true
        type: string
      - description: id of class
        in: query
        name: classid
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Add all clients information
      tags:
      - Client
  /api/v1/client/all:
    get:
      consumes:
      - application/json
      description: Get all clients information
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get all clients information
      tags:
      - Client
  /api/v1/client/id:
    delete:
      consumes:
      - application/json
      description: Delete clients information
      parameters:
      - description: if of client
        in: query
        name: id
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Delete clients information
      tags:
      - Client
  /api/v1/client/login:
    get:
      consumes:
      - application/json
      description: update password
      parameters:
      - description: id of user need to change password
        in: query
        name: id
        required: true
        type: string
      - description: new password
        in: query
        name: newpass
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: update password
      tags:
      - Client
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login
      tags:
      - Client
  /api/v1/course/add:
    post:
      consumes:
      - application/json
      description: add course
      parameters:
      - description: name of course
        in: query
        name: name
        required: true
        type: string
      - description: lecturer of course
        in: query
        name: lecturer
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: add course
      tags:
      - Course
  /api/v1/course/all:
    get:
      consumes:
      - application/json
      description: get all courses
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: get all courses
      tags:
      - Course
  /api/v1/course/allClasses/{id}:
    get:
      consumes:
      - application/json
      description: find all classes of a course
      parameters:
      - description: id of course
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/model.Class'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find all classes of a course
      tags:
      - Course
  /api/v1/course/id:
    delete:
      consumes:
      - application/json
      description: delete course by id
      parameters:
      - description: id of course
        in: query
        name: id
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: delete course by id
      tags:
      - Course
  /api/v1/courseatclass/{id}:
    get:
      consumes:
      - application/json
      description: find CourseAtClass record by id
      parameters:
      - description: id of row in CourseAtClass
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.CourseAtClass'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: find CourseAtClass record by id
      tags:
      - Course At Class
  /api/v1/courseatclass/add:
    post:
      consumes:
      - application/json
      description: add new relationship between course and class
      parameters:
      - description: id of course
        in: query
        name: course_id
        required: true
        type: string
      - description: id of class
        in: query
        name: class_id
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.CourseAtClass'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: add new relationship between course and class
      tags:
      - Course At Class
  /api/v1/courseatclass/all:
    get:
      consumes:
      - application/json
      description: get all record in table courseatclass
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.CourseAtClass'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: get all record in table courseatclass
      tags:
      - Course At Class
  /api/v1/courseatclass/id:
    delete:
      consumes:
      - application/json
      description: delete relationship between course and class
      parameters:
      - description: id of row in table
        in: query
        name: id
        required: true
        type: string
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/model.CourseAtClass'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
      summary: delete relationship between course and class
      tags:
      - Course At Class
swagger: "2.0"
